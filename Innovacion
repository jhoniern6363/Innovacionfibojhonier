<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pantalla Digital - Centro de Salud Aparicio Pomares</title>
    <!-- Carga de Tailwind CSS para estilos -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Fuentes personalizadas */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap');
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Animaciones */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .animate-fade-in {
            animation: fadeIn 0.5s ease-out forwards;
        }
        .animation-delay-100 { animation-delay: 0.1s; }
        .animation-delay-200 { animation-delay: 0.2s; }

        @keyframes bounceIn {
            0% { transform: scale(0.3); opacity: 0; }
            50% { transform: scale(1.05); opacity: 1; }
            70% { transform: scale(0.9); }
            100% { transform: scale(1); }
        }
        .animate-bounce-in {
            animation: bounceIn 0.8s ease-out forwards;
        }

        @keyframes zoomIn {
            from { transform: scale(0.8); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }
        .animate-zoom-in {
            animation: zoomIn 0.6s ease-out forwards;
        }

        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        .animate-slide-up {
            animation: slideUp 0.5s ease-out forwards;
        }
    </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-blue-500 to-indigo-700 flex items-center justify-center p-4">

    <div id="app-container" class="bg-white rounded-2xl shadow-2xl p-8 md:p-12 w-full max-w-2xl text-center flex flex-col items-center justify-center min-h-[600px]">
        <!-- El contenido de la aplicación se inyectará aquí -->
    </div>

    <script>
        // Variables de estado de la aplicación
        let currentScreen = 'welcome';
        let patientData = null;
        let message = '';
        let isLoading = false;
        let healthTips = '';
        let videoStream = null; // Para almacenar el stream de la cámara

        // Elemento contenedor principal de la aplicación
        const appContainer = document.getElementById('app-container');

        // Datos de pacientes simulados para demostración
        const mockPatients = [
            {
                dni: '12345678',
                nombre: 'Juan Pérez García',
                proximaCita: {
                    fecha: '15 de Julio de 2025',
                    hora: '10:30 AM',
                    especialidad: 'Medicina General',
                    medico: 'Dra. Ana López'
                }
            },
            {
                dni: '87654321',
                nombre: 'María Fernanda Rojas',
                proximaCita: {
                    fecha: '20 de Julio de 2025',
                    hora: '09:00 AM',
                    especialidad: 'Pediatría',
                    medico: 'Dr. Carlos Ruiz'
                }
            },
            {
                dni: '11223344',
                nombre: 'Carlos Alberto Salas',
                proximaCita: {
                    fecha: '18 de Julio de 2025',
                    hora: '11:00 AM',
                    especialidad: 'Odontología',
                    medico: 'Dr. Javier Soto'
                }
            }
        ];

        /**
         * Renderiza la pantalla actual de la aplicación.
         */
        function renderScreen() {
            appContainer.innerHTML = ''; // Limpiar contenido anterior
            switch (currentScreen) {
                case 'welcome':
                    renderWelcomeScreen();
                    break;
                case 'scanning':
                    renderFacialRecognitionScreen();
                    break;
                case 'loading':
                    renderLoadingScreen();
                    break;
                case 'appointment':
                    renderAppointmentDetailsScreen();
                    break;
                case 'healthTips':
                    renderHealthTipsScreen();
                    break;
                case 'error':
                    renderErrorMessage();
                    break;
                default:
                    renderWelcomeScreen();
            }
        }

        /**
         * Actualiza el estado de carga y el mensaje, y vuelve a renderizar.
         * @param {boolean} loadingState - Nuevo estado de carga.
         * @param {string} msg - Mensaje a mostrar.
         */
        function updateUI(loadingState, msg = '') {
            isLoading = loadingState;
            message = msg;
            renderScreen(); // Volver a renderizar para reflejar los cambios
        }

        /**
         * Detiene el stream de la cámara si está activo.
         */
        function stopCameraStream() {
            if (videoStream) {
                videoStream.getTracks().forEach(track => track.stop());
                videoStream = null;
            }
        }

        /**
         * Reinicia la aplicación a su estado inicial.
         */
        function resetApp() {
            stopCameraStream(); // Detener la cámara al reiniciar
            currentScreen = 'welcome';
            patientData = null;
            message = '';
            isLoading = false;
            healthTips = '';
            renderScreen();
        }

        /**
         * Renderiza la pantalla de bienvenida.
         */
        function renderWelcomeScreen() {
            appContainer.innerHTML = `
                <h1 class="text-4xl md:text-5xl font-extrabold text-gray-800 mb-6 animate-fade-in">
                    Bienvenido al Centro de Salud Aparicio Pomares
                </h1>
                <p class="text-lg md:text-xl text-gray-600 mb-10 animate-fade-in animation-delay-200">
                    Gestión de citas simplificada con reconocimiento facial.
                </p>
                <button id="startButton" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-4 px-8 rounded-full shadow-lg transform transition-transform duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 animate-bounce-in">
                    Iniciar Proceso
                </button>
            `;
            document.getElementById('startButton').addEventListener('click', () => {
                currentScreen = 'scanning';
                renderScreen();
            });
        }

        /**
         * Renderiza la pantalla de reconocimiento facial y solicita acceso a la cámara.
         */
        async function renderFacialRecognitionScreen() {
            appContainer.innerHTML = `
                <h2 class="text-3xl md:text-4xl font-bold text-gray-800 mb-6 animate-fade-in">
                    Escaneo Facial
                </h2>
                <p class="text-md md:text-lg text-gray-600 mb-8 animate-fade-in animation-delay-100">
                    Por favor, mire directamente a la cámara.
                </p>
                <div class="w-64 h-64 md:w-80 md:h-80 bg-gray-200 rounded-full flex items-center justify-center overflow-hidden mb-8 shadow-inner animate-zoom-in">
                    <video id="videoFeed" class="w-full h-full object-cover rounded-full" autoplay playsinline></video>
                    <canvas id="canvasCapture" style="display:none;"></canvas>
                </div>
                <button id="scanButton" class="bg-green-600 hover:bg-green-700 text-white font-bold py-4 px-8 rounded-full shadow-lg transform transition-transform duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-green-300 animate-bounce-in">
                    Escanear Rostro
                </button>
                <p id="messageDisplay" class="mt-6 text-red-500 text-lg animate-fade-in">${message}</p>
            `;

            const video = document.getElementById('videoFeed');
            const scanButton = document.getElementById('scanButton');
            const messageDisplay = document.getElementById('messageDisplay');

            try {
                // Solicitar acceso a la cámara
                videoStream = await navigator.mediaDevices.getUserMedia({ video: true });
                video.srcObject = videoStream;
                messageDisplay.textContent = 'Cámara lista. Haga clic en "Escanear Rostro".';
                messageDisplay.classList.remove('text-red-500');
                messageDisplay.classList.add('text-gray-600');
            } catch (err) {
                console.error('Error al acceder a la cámara:', err);
                message = 'No se pudo acceder a la cámara. Por favor, asegúrese de permitir el acceso.';
                messageDisplay.textContent = message;
                messageDisplay.classList.remove('text-gray-600');
                messageDisplay.classList.add('text-red-500');
                scanButton.disabled = true; // Deshabilitar el botón si no hay cámara
            }

            scanButton.addEventListener('click', simulateFacialScan);
        }

        /**
         * Simula el escaneo facial y la verificación con RENIEC.
         */
        function simulateFacialScan() {
            updateUI(true, 'Escaneando rostro y verificando con RENIEC...');
            stopCameraStream(); // Detener la cámara una vez que se "escanea"

            setTimeout(() => {
                const success = Math.random() > 0.3; // 70% de éxito, 30% de fallo para demostración

                if (success) {
                    const randomPatient = mockPatients[Math.floor(Math.random() * mockPatients.length)];
                    patientData = randomPatient;
                    updateUI(false, 'Identidad verificada. Buscando su cita...');
                    setTimeout(() => {
                        currentScreen = 'appointment';
                        renderScreen();
                    }, 1500); // Pequeño retraso para simular la búsqueda de cita
                } else {
                    message = 'Error: No se pudo verificar su identidad. Por favor, intente de nuevo.';
                    currentScreen = 'error';
                    updateUI(false, message);
                }
            }, 2000); // Simula el tiempo de escaneo y verificación
        }

        /**
         * Renderiza la pantalla de carga.
         */
        function renderLoadingScreen() {
            appContainer.innerHTML = `
                <div class="flex flex-col items-center justify-center h-full">
                    <svg class="animate-spin h-16 w-16 text-blue-500 mb-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <p class="text-xl text-gray-700 font-semibold animate-pulse">${message}</p>
                </div>
            `;
        }

        /**
         * Renderiza la pantalla de detalles de la cita.
         */
        function renderAppointmentDetailsScreen() {
            appContainer.innerHTML = `
                <h2 class="text-3xl md:text-4xl font-bold text-gray-800 mb-6 animate-fade-in">
                    ¡Cita Encontrada!
                </h2>
                <div class="bg-blue-50 p-6 rounded-xl shadow-md w-full max-w-md animate-slide-up">
                    <p class="text-gray-700 text-lg mb-3">
                        <span class="font-semibold">Nombre:</span> ${patientData.nombre}
                    </p>
                    <p class="text-gray-700 text-lg mb-3">
                        <span class="font-semibold">DNI:</span> ${patientData.dni}
                    </p>
                    <h3 class="text-2xl font-bold text-blue-700 mt-6 mb-4">
                        Su Próxima Cita:
                    </h3>
                    <p class="text-gray-700 text-lg mb-2">
                        <span class="font-semibold">Fecha:</span> ${patientData.proximaCita.fecha}
                    </p>
                    <p class="text-gray-700 text-lg mb-2">
                        <span class="font-semibold">Hora:</span> ${patientData.proximaCita.hora}
                    </p>
                    <p class="text-gray-700 text-lg mb-2">
                        <span class="font-semibold">Especialidad:</span> ${patientData.proximaCita.especialidad}
                    </p>
                    <p class="text-gray-700 text-lg">
                        <span class="font-semibold">Médico:</span> ${patientData.proximaCita.medico}
                    </p>
                </div>
                <div class="flex flex-col md:flex-row gap-4 mt-10">
                    <button id="getHealthTipsButton" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-full shadow-lg transform transition-transform duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-purple-300 animate-bounce-in flex items-center justify-center">
                        ✨ Obtener Consejos de Salud
                    </button>
                    <button id="resetButton" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-full shadow-lg transform transition-transform duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-gray-300 animate-bounce-in">
                        Volver al Inicio
                    </button>
                </div>
            `;
            document.getElementById('getHealthTipsButton').addEventListener('click', () => fetchHealthTips(patientData.proximaCita.especialidad));
            document.getElementById('resetButton').addEventListener('click', resetApp);
        }

        /**
         * Renderiza la pantalla de consejos de salud.
         */
        function renderHealthTipsScreen() {
            appContainer.innerHTML = `
                <h2 class="text-3xl md:text-4xl font-bold text-gray-800 mb-6 animate-fade-in">
                    Consejos de Salud Personalizados
                </h2>
                <div class="bg-green-50 p-6 rounded-xl shadow-md w-full max-w-md text-left animate-slide-up">
                    ${healthTips ? `<p class="text-gray-700 text-lg whitespace-pre-wrap">${healthTips}</p>` : `<p class="text-gray-700 text-lg">No se pudieron cargar los consejos de salud.</p>`}
                </div>
                <div class="flex flex-col md:flex-row gap-4 mt-10">
                    <button id="backToAppointmentButton" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full shadow-lg transform transition-transform duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 animate-bounce-in">
                        Volver a la Cita
                    </button>
                    <button id="resetButton" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-full shadow-lg transform transition-transform duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-gray-300 animate-bounce-in">
                        Volver al Inicio
                    </button>
                </div>
            `;
            document.getElementById('backToAppointmentButton').addEventListener('click', () => {
                currentScreen = 'appointment';
                renderScreen();
            });
            document.getElementById('resetButton').addEventListener('click', resetApp);
        }

        /**
         * Renderiza la pantalla de mensaje de error.
         */
        function renderErrorMessage() {
            appContainer.innerHTML = `
                <h2 class="text-3xl md:text-4xl font-bold text-red-600 mb-6 animate-fade-in">
                    ¡Atención!
                </h2>
                <p class="text-xl text-gray-700 mb-8 animate-fade-in animation-delay-100">
                    ${message}
                </p>
                <div class="flex flex-col md:flex-row gap-4">
                    <button id="retryButton" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-3 px-6 rounded-full shadow-lg transform transition-transform duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-yellow-300 animate-bounce-in">
                        Reintentar Escaneo
                    </button>
                    <button id="resetButton" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-full shadow-lg transform transition-transform duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-gray-300 animate-bounce-in">
                        Volver al Inicio
                    </button>
                </div>
            `;
            document.getElementById('retryButton').addEventListener('click', () => {
                currentScreen = 'scanning';
                renderScreen();
            });
            document.getElementById('resetButton').addEventListener('click', resetApp);
        }

        /**
         * Llama a la API de Gemini para obtener consejos de salud.
         * @param {string} especialidad - La especialidad médica de la cita.
         */
        async function fetchHealthTips(especialidad) {
            updateUI(true, 'Generando consejos de salud...');
            currentScreen = 'loading';
            renderScreen(); // Mostrar pantalla de carga

            try {
                let chatHistory = [];
                const prompt = `Genera 3 consejos de salud concisos y útiles para una persona que tiene una cita de ${especialidad}. Enfócate en preparación o bienestar general relacionado con esa especialidad.`;
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });

                const payload = { contents: chatHistory };
                const apiKey = ""; // La API Key será proporcionada por el entorno de Canvas
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();

                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    healthTips = result.candidates[0].content.parts[0].text;
                    currentScreen = 'healthTips';
                } else {
                    message = 'Lo sentimos, no pudimos generar los consejos de salud en este momento.';
                    currentScreen = 'error';
                }
            } catch (error) {
                console.error('Error al llamar a la API de Gemini:', error);
                message = 'Ocurrió un error al obtener los consejos. Por favor, intente de nuevo más tarde.';
                currentScreen = 'error';
            } finally {
                updateUI(false); // Finalizar carga y renderizar la pantalla final (consejos o error)
            }
        }

        // Iniciar la aplicación al cargar la página
        document.addEventListener('DOMContentLoaded', renderScreen);
    </script>
</body>
</html>
